Assignment No :- 10
Roll No :- 31157

__________________________________________________________________________________________________

db.studentData.insertMany([
  {
    name: "Shreya",
    roll: 1,
    year: "FE",
    gpa: 9.41,
    attendance: 75,
    subjects: [
      { subject: "Maths", marks: 96 },
      { subject: "Physics", marks: 85 },
      { subject: "Data Structures", marks: 90 },
      { subject: "Digital Logic Design", marks: 88 }
    ]
  },
  {
    name: "Aarav",
    roll: 2,
    year: "FE",
    gpa: 8.75,
    attendance: 80,
    subjects: [
      { subject: "Maths", marks: 89 },
      { subject: "Chemistry", marks: 78 },
      { subject: "English", marks: 82 },
      { subject: "Computer Networks", marks: 80 }
    ]
  },
  {
    name: "Ishita",
    roll: 3,
    year: "FE",
    gpa: 9.12,
    attendance: 90,
    subjects: [
      { subject: "Biology", marks: 92 },
      { subject: "Microprocessors", marks: 86 }
    ]
  },
  {
    name: "Rohan",
    roll: 4,
    year: "SE",
    gpa: 8.92,
    attendance: 85,
    subjects: [
      { subject: "Physics", marks: 81 },
      { subject: "Maths", marks: 79 },
      { subject: "History", marks: 72 },
      { subject: "Geography", marks: 88 },
      { subject: "Operating Systems", marks: 85 }
    ]
  },
  {
    name: "Maya",
    roll: 5,
    year: "FE",
    gpa: 9.58,
    attendance: 92,
    subjects: [
      { subject: "Maths", marks: 95 },
      { subject: "Chemistry", marks: 88 },
      { subject: "Database Management Systems", marks: 92 }
    ]
  },
  {
    name: "Kabir",
    roll: 6,
    year: "SE",
    gpa: 8.47,
    attendance: 78,
    subjects: [
      { subject: "Maths", marks: 74 },
      { subject: "Physics", marks: 82 },
      { subject: "Computer Science", marks: 80 },
      { subject: "Software Engineering", marks: 78 }
    ]
  },
  {
    name: "Nisha",
    roll: 7,
    year: "TE",
    gpa: 9.33,
    attendance: 88,
    subjects: [
      { subject: "Maths", marks: 88 },
      { subject: "Compiler Design", marks: 84 }
    ]
  },
  {
    name: "Sanjay",
    roll: 8,
    year: "FE",
    gpa: 8.69,
    attendance: 80,
    subjects: [
      { subject: "Chemistry", marks: 80 },
      { subject: "Maths", marks: 84 },
      { subject: "English", marks: 85 },
      { subject: "Computer Architecture", marks: 81 }
    ]
  },
  {
    name: "Pooja",
    roll: 9,
    year: "SE",
    gpa: 9.01,
    attendance: 86,
    subjects: [
      { subject: "Physics", marks: 89 },
      { subject: "Maths", marks: 82 },
      { subject: "Web Technologies", marks: 90 }
    ]
  },
  {
    name: "Viraj",
    roll: 10,
    year: "TE",
    gpa: 8.77,
    attendance: 83,
    subjects: [
      { subject: "Maths", marks: 76 },
      { subject: "Network Security", marks: 79 }
    ]
  },
  {
    name: "Sakshi",
    roll: 11,
    year: "FE",
    gpa: 9.47,
    attendance: 91,
    subjects: [
      { subject: "Biology", marks: 90 },
      { subject: "Maths", marks: 83 },
      { subject: "Physics", marks: 87 },
      { subject: "Artificial Intelligence", marks: 91 }
    ]
  },
  {
    name: "Raj",
    roll: 12,
    year: "TE",
    gpa: 8.92,
    attendance: 84,
    subjects: [
      { subject: "Physics", marks: 88 },
      { subject: "Chemistry", marks: 84 },
      { subject: "Maths", marks: 75 },
      { subject: "Software Testing", marks: 80 }
    ]
  },
  {
    name: "Ananya",
    roll: 13,
    year: "FE",
    gpa: 9.23,
    attendance: 79,
    subjects: [
      { subject: "Maths", marks: 92 },
      { subject: "Machine Learning", marks: 89 }
    ]
  },
  {
    name: "Aman",
    roll: 14,
    year: "SE",
    gpa: 8.45,
    attendance: 76,
    subjects: [
      { subject: "Maths", marks: 77 },
      { subject: "Physics", marks: 81 },
      { subject: "Data Mining", marks: 83 }
    ]
  },
  {
    name: "Simran",
    roll: 15,
    year: "FE",
    gpa: 9.61,
    attendance: 93,
    subjects: [
      { subject: "Chemistry", marks: 89 },
      { subject: "Biology", marks: 93 },
      { subject: "Maths", marks: 90 },
      { subject: "Physics", marks: 86 },
      { subject: "Cloud Computing", marks: 91 }
    ]
  },
  {
    name: "Kunal",
    roll: 16,
    year: "TE",
    gpa: 8.96,
    attendance: 82,
    subjects: [
      { subject: "Physics", marks: 85 },
      { subject: "Embedded Systems", marks: 87 }
    ]
  },
  {
    name: "Swara",
    roll: 17,
    year: "SE",
    gpa: 9.12,
    attendance: 81,
    subjects: [
      { subject: "Maths", marks: 87 },
      { subject: "Chemistry", marks: 82 },
      { subject: "English", marks: 79 },
      { subject: "Artificial Intelligence", marks: 90 }
    ]
  },
  {
    name: "Gaurav",
    roll: 18,
    year: "FE",
    gpa: 9.03,
    attendance: 85,
    subjects: [
      { subject: "Maths", marks: 90 },
      { subject: "Physics", marks: 86 },
      { subject: "Chemistry", marks: 84 },
      { subject: "Database Management Systems", marks: 88 }
    ]
  },
  {
    name: "Riya",
    roll: 19,
    year: "TE",
    gpa: 8.84,
    attendance: 77,
    subjects: [
      { subject: "Biology", marks: 92 },
      { subject: "Maths", marks: 80 },
      { subject: "Software Engineering", marks: 81 }
    ]
  },
  {
    name: "Harsh",
    roll: 20,
    year: "SE",
    gpa: 8.57,
    attendance: 78,
    subjects: [
      { subject: "Physics", marks: 84 },
      { subject: "Chemistry", marks: 76 },
      { subject: "Maths", marks: 79 },
      { subject: "Operating Systems", marks: 75 }
    ]
  }
]);


________________________________________________________________________________________________



Q1) Count the number of students

db.studentData.count();


Q2) Show different years in which students are enrolled

db.studentData.distinct("year");


Q3) Show all students in the FE year with GPA greater than 9

db.studentData.aggregate([
  { $match: { $and: [{ year: "FE" }, { gpa: { $gt: 9 } }] } }
]);


Q4) Show the total GPA of students in SE year

db.studentData.aggregate([
  { $match: { year: "SE" } },
  { $group: { _id: "$year", totalGPA: { $sum: "$gpa" } } }
]);


Q5) Find the student who has the subject "Machine Learning"

db.studentData.find({ "subjects.subject": "Machine Learning" });


Q6) Enlist all subjects taken by students in the TE year

db.studentData.aggregate([
  { $match: { year: "TE" } },
  { $project: { _id: 0, name: 1, subjects: "$subjects.subject" } }
]);


Q7) Count total number of subjects taken by all students and sort in descending order

db.studentData.aggregate([
  { $unwind: "$subjects" },
  { $group: { _id: null, totalSubjects: { $sum: 1 } } },
  { $sort: { totalSubjects: -1 } }
]);


Q8) Count the number of subjects each student has

db.studentData.aggregate([
  { $unwind: "$subjects" },
  { $group: { _id: "$name", totalSubjects: { $sum: 1 } } },
  { $sort: { totalSubjects: 1 } }
]);


Q9) Display all students with their respective attendance

db.studentData.aggregate([
  { $project: { name: 1, attendance: 1 } }
]);


Q10) Sort students based on GPA and display top 5 students

db.studentData.aggregate([
  { $match: { gpa: { $gt: 8 } } },  
  { $sort: { gpa: -1 } },           
  { $limit: 5 }                     
]);





db.Employee.insertMany([
  {
    empid: 1,
    name: "John Doe",
    age: 30,
    hobbies: ["Cycling", "Reading"],
    review: {
      type: "Manager",
      comments: "Outstanding performance throughout the year."
    },
    salary: 75000.50,
    gender: "Male"
  },
  {
    empid: 2,
    name: "Jane Smith",
    age: 28,
    hobbies: ["Acting", "Traveling"],
    review: {
      type: "Supervisor",
      comments: "Meets expectations and shows great potential."
    },
    salary: 62000.00,
    gender: "Female"
  },
  {
    empid: 3,
    name: "Emily Johnson",
    age: 25,
    hobbies: ["Cycling", "Sports"],
    review: {
      type: "Manager",
      comments: "Strong leadership skills and teamwork."
    },
    salary: 70000.00,
    gender: "Female"
  },
  {
    empid: 4,
    name: "Michael Brown",
    age: 35,
    hobbies: ["Reading", "Traveling"],
    review: {
      type: "Supervisor",
      comments: "Consistently delivers high-quality work."
    },
    salary: 80000.75,
    gender: "Male"
  },
  {
    empid: 5,
    name: "Jessica Williams",
    age: 29,
    hobbies: ["Acting", "Cycling"],
    review: {
      type: "Manager",
      comments: "Exceeds expectations and drives results."
    },
    salary: 72000.25,
    gender: "Female"
  }
]);




// Aggregate employees by their hobbies
db.Employee.aggregate([
    { $unwind: "$hobbies" },
    { 
        $group: {
            _id: "$hobbies",
            Employees: { $push: "$name" }  // Correctly wrap "$name" without quotes
        }
    },
    { $sort: { _id: 1 } }  // Corrected sort syntax
]);

// Aggregate total salary of male employees and count, sorted by salary in descending order
db.Employee.aggregate([
    { $match: { gender: 'Male' } },
    { 
        $group: {
            _id: "$name",
            totalSalary: { $sum: "$salary" }
        }
    },
    { $sort: { totalSalary: -1 } },  // Sort by salary in descending order after grouping by name
    { 
        $group: {
            _id: null,
            TotalSalary: { $sum: "$totalSalary" },
            Count: { $sum: 1 }
        }
    },
    { 
        $project: { 
            _id: 0,
            TotalSalary: 1,
            Count: 1
        } 
    }
]);

// Create unique index on empid
db.Employee.createIndex({ empid: 1 }, { unique: true });

// Optional additional indexes (adjust if needed to optimize queries)
db.Employee.createIndex({ empid: 1, name: 1 });

// Test queries with `explain`
db.Employee.find({ empid: 1 }).explain();
db.Employee.find({ empid: 1, name: "" }).explain();
db.Employee.find({ empid: 7 }).explain();






Simple Aggregation Queries


Count the total number of employees:

db.Employee.aggregate([
    {
        $count: "totalEmployees"
    }
]);  

 

Find the average salary of all employees:

db.Employee.aggregate([
    {
        $group: {
            _id: null,
            averageSalary: { $avg: "$salary" }
        }
    }
]);


Get the maximum age of employees:

db.Employee.aggregate([
    {
        $group: {
            _id: null,
            maxAge: { $max: "$age" }
        }
    }
]);



List distinct hobbies from all employees:

db.Employee.aggregate([
    {
        $group: {
            _id: null,
            distinctHobbies: { $addToSet: "$hobbies" }
        }
    }
]);


Pipeline Aggregation Queries


Group employees by gender and calculate total salary per gender:

db.Employee.aggregate([
    {
        $group: {
            _id: "$gender",
            totalSalary: { $sum: "$salary" }
        }
    },
    {
        $sort: { totalSalary: -1 }
    }
]);


Find the average salary for each review type (Manager/Supervisor):

db.Employee.aggregate([
    {
        $group: {
            _id: "$review.type",
            averageSalary: { $avg: "$salary" }
        }
    }
]);


Unwind the hobbies and count how many employees have each hobby:

db.Employee.aggregate([
    { $unwind: "$hobbies" },
    {
        $group: {
            _id: "$hobbies",
            employeeCount: { $sum: 1 }
        }
    },
    {
        $sort: { employeeCount: -1 }
    }
]);



Calculate the total salary and average age of employees for each review type:

db.Employee.aggregate([
    {
        $group: {
            _id: "$review.type",
            totalSalary: { $sum: "$salary" },
            averageAge: { $avg: "$age" }
        }
    }
]);



